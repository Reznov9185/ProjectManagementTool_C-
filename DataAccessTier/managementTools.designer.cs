#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessTier
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ManagementTools")]
	public partial class managementToolsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertSequence(Sequence instance);
    partial void UpdateSequence(Sequence instance);
    partial void DeleteSequence(Sequence instance);
    #endregion
		
		public managementToolsDataContext() : 
				base(global::DataAccessTier.Properties.Settings.Default.ManagementToolsConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public managementToolsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public managementToolsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public managementToolsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public managementToolsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Sequence> Sequences
		{
			get
			{
				return this.GetTable<Sequence>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Job;
		
		private int _Machine1;
		
		private int _Machine2;
		
		private int _Machine3;
		
		private int _Machine4;
		
		private int _Machine5;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobChanging(int value);
    partial void OnJobChanged();
    partial void OnMachine1Changing(int value);
    partial void OnMachine1Changed();
    partial void OnMachine2Changing(int value);
    partial void OnMachine2Changed();
    partial void OnMachine3Changing(int value);
    partial void OnMachine3Changed();
    partial void OnMachine4Changing(int value);
    partial void OnMachine4Changed();
    partial void OnMachine5Changing(int value);
    partial void OnMachine5Changed();
    #endregion
		
		public Schedule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				if ((this._Job != value))
				{
					this.OnJobChanging(value);
					this.SendPropertyChanging();
					this._Job = value;
					this.SendPropertyChanged("Job");
					this.OnJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine1", DbType="Int NOT NULL")]
		public int Machine1
		{
			get
			{
				return this._Machine1;
			}
			set
			{
				if ((this._Machine1 != value))
				{
					this.OnMachine1Changing(value);
					this.SendPropertyChanging();
					this._Machine1 = value;
					this.SendPropertyChanged("Machine1");
					this.OnMachine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine2", DbType="Int NOT NULL")]
		public int Machine2
		{
			get
			{
				return this._Machine2;
			}
			set
			{
				if ((this._Machine2 != value))
				{
					this.OnMachine2Changing(value);
					this.SendPropertyChanging();
					this._Machine2 = value;
					this.SendPropertyChanged("Machine2");
					this.OnMachine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine3", DbType="Int NOT NULL")]
		public int Machine3
		{
			get
			{
				return this._Machine3;
			}
			set
			{
				if ((this._Machine3 != value))
				{
					this.OnMachine3Changing(value);
					this.SendPropertyChanging();
					this._Machine3 = value;
					this.SendPropertyChanged("Machine3");
					this.OnMachine3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine4", DbType="Int NOT NULL")]
		public int Machine4
		{
			get
			{
				return this._Machine4;
			}
			set
			{
				if ((this._Machine4 != value))
				{
					this.OnMachine4Changing(value);
					this.SendPropertyChanging();
					this._Machine4 = value;
					this.SendPropertyChanged("Machine4");
					this.OnMachine4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine5", DbType="Int NOT NULL")]
		public int Machine5
		{
			get
			{
				return this._Machine5;
			}
			set
			{
				if ((this._Machine5 != value))
				{
					this.OnMachine5Changing(value);
					this.SendPropertyChanging();
					this._Machine5 = value;
					this.SendPropertyChanged("Machine5");
					this.OnMachine5Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sequence")]
	public partial class Sequence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskNo;
		
		private string _TaskName;
		
		private int _ProceessingTime;
		
		private int _DueDate;
		
		private System.Nullable<int> _NoOfOperation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskNoChanging(int value);
    partial void OnTaskNoChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnProceessingTimeChanging(int value);
    partial void OnProceessingTimeChanged();
    partial void OnDueDateChanging(int value);
    partial void OnDueDateChanged();
    partial void OnNoOfOperationChanging(System.Nullable<int> value);
    partial void OnNoOfOperationChanged();
    #endregion
		
		public Sequence()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskNo
		{
			get
			{
				return this._TaskNo;
			}
			set
			{
				if ((this._TaskNo != value))
				{
					this.OnTaskNoChanging(value);
					this.SendPropertyChanging();
					this._TaskNo = value;
					this.SendPropertyChanged("TaskNo");
					this.OnTaskNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProceessingTime", DbType="Int NOT NULL")]
		public int ProceessingTime
		{
			get
			{
				return this._ProceessingTime;
			}
			set
			{
				if ((this._ProceessingTime != value))
				{
					this.OnProceessingTimeChanging(value);
					this.SendPropertyChanging();
					this._ProceessingTime = value;
					this.SendPropertyChanged("ProceessingTime");
					this.OnProceessingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="Int NOT NULL")]
		public int DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfOperation", DbType="Int")]
		public System.Nullable<int> NoOfOperation
		{
			get
			{
				return this._NoOfOperation;
			}
			set
			{
				if ((this._NoOfOperation != value))
				{
					this.OnNoOfOperationChanging(value);
					this.SendPropertyChanging();
					this._NoOfOperation = value;
					this.SendPropertyChanged("NoOfOperation");
					this.OnNoOfOperationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
